---
title: "EDS 221: Day 7 Interactive Session"
author: "Liz Peterson"
format: html
editor_options: 
  chunk_output_type: console
warning: FALSE
message: FALSE
---
# Interactive Session 7 (8/20/24)
```{r}
# Read in libraries
library(tidyverse)
library(palmerpenguins)
library(lubridate)
```

# Data wrangling refresher
```{r}
penguins <- palmerpenguins::penguins %>%
  filter(island %in% c("Biscoe", "Dream")) %>%
  select(-year, -sex) %>%
  mutate(body_mass_kg = body_mass_g/1000) %>%
  rename(location = island)
```

```{r}
penguins2 <- palmerpenguins::penguins %>%
  filter(species == "Adelie") %>% # only adelie penguins
  filter(!is.na(flipper_length_mm)) %>% # get rid of NA's in flipper length
  group_by(sex) %>%
  summarize(mean_length_mm = mean(flipper_length_mm),
            sd_length_mm = sd(flipper_length_mm),
            sample_size = n()) # counts up rows in what we grouped by (sex)
```

# Wrangling continued - joins
```{r}
# data set pasted in from course website using addin paste as tribble
# from datapasta
animals <- tibble::tribble(
  ~location,   ~species,  ~maturity,
   "lagoon",   "bobcat",    "adult",
    "bluff",   "coyote", "juvenile",
    "creek",      "fox",    "adult",
     "oaks", "squirrel", "juvenile",
    "bluff",   "bobcat",    "adult"
  )
```

```{r}
sites <- tibble::tribble(
  ~location,      ~full_site_name, ~jurisdiction,
    "beach",       "Goleta Beach",     "SB City",
   "lagoon",        "UCSB Lagoon",        "UCSB",
    "bluff",       "Ellwood Mesa",     "SB City",
     "oaks", "Fremont Campground",        "USFS"
  )
```

## filtering joins
```{r}
# everything from both data frames is retained, regardless of whether or not it has a match in the data frame it's being joined to
full_join_example <- full_join(animals, sites)
```

```{r}
# everything in animals is kept. only things in sites that have a matching key in animals are joined to it. things in sites that do not have a matching key in animals are dropped
left_join_example <- left_join(animals, sites)
```

```{r}
right_join_example <- right_join(animals, sites)
```

```{r}
# only keep stuff if they have a key match in animals and sites
inner_join_example <- inner_join(animals, sites)
```

## mutating joins
```{r}
# only keeps observations in animals if they have a match in sites (does not join columns)
semi_join_example <- semi_join(animals, sites)
# same as doing filter
semi_join_test <- animals %>%
  filter(location %in% sites$location)
```

```{r}
# only keeps observations in animals if they do not have a match in sites
anti_join_example <- anti_join(animals, sites)
# same as doing filter
anti_join_test <- animals %>%
  filter(!location %in% sites$location)
```

```{r}
sites <- sites %>%
  rename(place = location)
# test_join <- full_join(animals, sites) # this doesn't work because the common variable is gone

test_join <- full_join(animals, sites, by = c("location" = "place"))
```

# Working with dates & strings
```{r}
library(tidyverse)
library(lubridate)
```

## converting dates using lubridate 
```{r}
my_date <- "03-05-1998"
lubridate::mdy(my_date) # using mdy because the given date is in month, day, year format. then it changes it into ISO 8601

my_date <- "11/7/2003"
lubridate::mdy(my_date)

my_date <- "08-Jun-1991"
lubridate::dmy(my_date) # using dmy because the given date is in day, month, year format

my_date <- "19960518"
my_date <- lubridate::ymd(my_date)
# class(my_date) # class is Date
```

```{r}
lubridate::mdy("1950-08-30") # doesn't work because we used the wrong function (i.e. there is no month 1950)
```

## adding time to our dates
```{r}
# using date and time
time <- "2020-08-12 11:18"
time <- lubridate::ymd_hm(time) # puts it in UTC automatically
# class(time) # class is POSIXct

with_tz(time, "America/Los_Angeles") # converted date to PDT time zone
with_tz(time, "Australia/Sydney")
```

## pulling elements out of our dates
```{r}
my_time <- lubridate::ymd_hms(time)

week(my_time)
hour(my_time)
day(my_time)
minute(my_time)
year(my_time)
month(my_time)
```

```{r}
# get the current time from base R
comp_time_start <- Sys.time()
comp_time_end <- Sys.time()

comp_time_end - comp_time_start # can show us how long it took R to run this chunk
```

## changing dates in data frames
```{r}
urchin_counts <- tribble(
  ~date, ~species, ~size_mm,
  "10/3/2020", "purple", 55,
  "10/4/2020", "red", 48,
  "11/17/2020", "red", 67
)

urchin_counts <- urchin_counts %>%
  mutate(date = lubridate::mdy(date)) %>% # took date information and put it in the correct format
  mutate(year = year(date), # creating new columns for year, month, and day specifically
         month = month(date),
         day = day(date))

urchin_counts %>%
  group_by(year) %>%
  summarize(total = n())
```

## duration of time / intervals
```{r}
day_1 <- lubridate::ymd("2020-01-06")
day_2 <- lubridate::ymd("2020-05-18")
day_3 <- lubridate::ymd("2020-05-19")

time_interval <- interval(day_1, day_2)
time_length(time_interval, "day") # tells us how many days are between day 1 and day 2
time_length(time_interval, "week") # tells us how many weeks are between day 1 and day 2
time_length(time_interval, "month")

time_length(interval(day_2, day_3), "day")
```

# Wrangling strings with stringr
## str_detect() & str_replace()
```{r}
my_string <- "Teddy loves eating salmon and socks."

my_string %>%
  str_detect("pup") # gives FALSE because "pup" isn't in the string

my_string_vec <- c("burrito", "fish taco", "Taco salad")

my_string_vec %>%
  str_detect("fish") # gives FALSE TRUE FALSE because it's only in my_string_vec[2]
```

```{r}
skywalkers <- starwars %>%
  filter(str_detect(name, "Skywalker"))
```

```{r}
firewalkers <- starwars %>%
  mutate(name = str_replace(name,
                            pattern = "Sky",
                            replacement = "Fire"))
```

## using str_trim() & str_squish()
```{r}
feedback <- c("I ate  some  nachos", "Wednesday morning   ")

str_squish(feedback) # gets rid of extra, weird white space (not the spaces between the words though)
str_trim(feedback) # only gets rid of the leading and trailing white space
```

## changing cases of strings
```{r}
str_to_lower(feedback)
str_to_upper(feedback)
str_to_title(feedback)

str_count(feedback, pattern = "nachos") # gives us the number of matches to a specific pattern
```

